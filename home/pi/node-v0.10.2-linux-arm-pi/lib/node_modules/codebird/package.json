{
  "name": "codebird",
  "version": "2.6.0",
  "description": "A Twitter library in JavaScript.",
  "keywords": [
    "Twitter",
    "API",
    "networking",
    "CORS"
  ],
  "homepage": "http://www.jublo.net/projects/codebird/js",
  "bugs": "https://github.com/jublonet/codebird-js/issues",
  "license": "GPL-3.0+",
  "author": {
    "name": "Jublo Solutions",
    "email": "support@jublo.net",
    "url": "http://jublo.net/"
  },
  "contributors": [
    {
      "name": "Joshua Atkins",
      "email": "joshua.atkins@jublo.net",
      "url": "http://atkins.im/"
    },
    {
      "name": "J.M.",
      "email": "jm@jublo.net",
      "url": "http://mynetx.net/"
    }
  ],
  "main": "codebird.js",
  "directories": {
    "example": "examples"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jublonet/codebird-js.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "readme": "codebird-js\n===========\n*A Twitter library in JavaScript.*\n\nCopyright (C) 2010-2015 Jublo Solutions <support@jublo.net>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nIncluding Codebird\n------------------\n\nTo include Codebird in your code, add its scripts to your markup:\n\n```html\n<script type=\"text/javascript\" src=\"codebird.js\"></script>\n\n<script type=\"text/javascript\">\nvar cb = new Codebird;\ncb.setConsumerKey(\"YOURKEY\", \"YOURSECRET\");\n</script>\n```\n\nYou may also use a JavaScript module loader of your choice\n(such as [RequireJS](http://requirejs.org/) or the one bundled in Node.js)\nto load Codebird unobtrusively.  In Node.js, loading Codebird looks like this:\n\n```javascript\nvar Codebird = require(\"codebird\");\n// or with leading \"./\", if the codebird.js file is in your main folder:\n// var Codebird = require(\"./codebird\");\n\nvar cb = new Codebird;\ncb.setConsumerKey(\"YOURKEY\", \"YOURSECRET\");\n```\n\n\nAuthentication\n--------------\n\nTo authenticate your API requests on behalf of a certain Twitter user\n(following OAuth 1.0a), take a look at these steps:\n\n```html\n<script type=\"text/javascript\" src=\"codebird.js\"></script>\n\n<script type=\"text/javascript\">\nvar cb = new Codebird;\ncb.setConsumerKey(\"YOURKEY\", \"YOURSECRET\");\n</script>\n```\n\nYou may either set the OAuth token and secret, if you already have them:\n```javascript\ncb.setToken(\"YOURTOKEN\", \"YOURTOKENSECRET\");\n```\n\nOr you authenticate, like this:\n\n```javascript\n// gets a request token\ncb.__call(\n    \"oauth_requestToken\",\n    {oauth_callback: \"oob\"},\n    function (reply) {\n        // stores it\n        cb.setToken(reply.oauth_token, reply.oauth_token_secret);\n\n        // gets the authorize screen URL\n        cb.__call(\n            \"oauth_authorize\",\n            {},\n            function (auth_url) {\n                window.codebird_auth = window.open(auth_url);\n            }\n        );\n    }\n);\n```\n\nNow you need to add a PIN box to your website.\nAfter the user enters the PIN, complete the authentication:\n\n```javascript\ncb.__call(\n    \"oauth_accessToken\",\n    {oauth_verifier: document.getElementById(\"PINFIELD\").value},\n    function (reply) {\n        // store the authenticated token, which may be different from the request token (!)\n        cb.setToken(reply.oauth_token, reply.oauth_token_secret);\n\n        // if you need to persist the login after page reload,\n        // consider storing the token in a cookie or HTML5 local storage\n    }\n);\n```\n\n### Application-only auth\n\nSome API methods also support authenticating on a per-application level.\nThis is useful for getting data that are not directly related to a specific\nTwitter user, but generic to the Twitter ecosystem (such as ```search/tweets```).\n\nTo obtain an app-only bearer token, call the appropriate API:\n\n```javascript\ncb.__call(\n    \"oauth2_token\",\n    {},\n    function (reply) {\n        var bearer_token = reply.access_token;\n    }\n);\n```\n\nI strongly recommend that you store the obtained bearer token in your database.\nThere is no need to re-obtain the token with each page load, as it becomes invalid\nonly when you call the ```oauth2/invalidate_token``` method.\n\nIf you already have your token, tell Codebird to use it:\n```javascript\ncb.setBearerToken(\"YOURBEARERTOKEN\");\n```\nIn this case, you don't need to set the consumer key and secret.\nFor sending an API request with app-only auth, see the ‘Usage examples’ section.\n\n### Authenticating using a callback URL, without PIN\n\n\n1. Before sending your user off to Twitter, you have to store the request token and its secret, for example in a cookie.\n2. In the callback URL, extract those values and assign them to the Codebird object.\n3. Extract the ```oauth_verifier``` field from the request URI.\n\nIn Javascript, try extracting the URL parameter like this:\n\n```javascript\nvar cb          = new Codebird;\nvar current_url = location.toString();\nvar query       = current_url.match(/\\?(.+)$/).split(\"&amp;\");\nvar parameters  = {};\nvar parameter;\n\ncb.setConsumerKey(\"STUFF\", \"HERE\");\n\nfor (var i = 0; i < query.length; i++) {\n    parameter = query[i].split(\"=\");\n    if (parameter.length === 1) {\n        parameter[1] = \"\";\n    }\n    parameters[decodeURIComponent(parameter[0])] = decodeURIComponent(parameter[1]);\n}\n\n// check if oauth_verifier is set\nif (typeof parameters.oauth_verifier !== \"undefined\") {\n    // assign stored request token parameters to codebird here\n    // ...\n    cb.setToken(stored_somewhere.oauth_token, stored_somewhere.oauth_token_secret);\n\n    cb.__call(\n        \"oauth_accessToken\",\n        {\n            oauth_verifier: parameters.oauth_verifier\n        },\n        function (reply) {\n            cb.setToken(reply.oauth_token, reply.oauth_token_secret);\n\n            // if you need to persist the login after page reload,\n            // consider storing the token in a cookie or HTML5 local storage\n        }\n    );\n}\n```\n\n\nUsage examples\n--------------\n\n:warning: *Because the Consumer Key and Token Secret are available in the code,\nit is important that you configure your app as read-only at Twitter,\nunless you are sure to know what you are doing.*\n\nWhen you have an access token, calling the API is simple:\n\n```javascript\ncb.setToken(\"YOURTOKEN\", \"YOURTOKENSECRET\"); // see above\n\ncb.__call(\n    \"statuses_homeTimeline\",\n    {},\n    function (reply) {\n        console.log(reply);\n    }\n);\n```\n\nTweeting is as easy as this:\n\n```javascript\ncb.__call(\n    \"statuses_update\",\n    {\"status\": \"Whohoo, I just tweeted!\"},\n    function (reply) {\n        // ...\n    }\n);\n```\n\n:warning: *Make sure to urlencode any parameter values that contain\nquery-reserved characters, like tweeting the `&` sign:*\n\n```javascript\nvar params = \"status=\" + encodeURIComponent(\"Fish & chips\");\ncb.__call(\n    \"statuses_update\",\n    params,\n    function (reply) {\n        // ...\n    }\n);\n```\n\nIn most cases, giving all parameters in an array is easier,\nbecause no encoding is needed:\n\n```javascript\nvar params = {\n    status: \"Fish & chips\"\n};\ncb.__call(\n    \"statuses_update\",\n    params,\n    function (reply) {\n        // ...\n    }\n);\n```\n\n```javascript\nvar params = {\n    screen_name: \"jublonet\"\n};\ncb.__call(\n    \"users_show\",\n    params,\n    function (reply) {\n        // ...\n    }\n);\n```\n\n```javascript\nvar params = {\n    q: \"NYC\"\n};\ncb.__call(\n    \"search_tweets\",\n    params,\n    function (reply) {\n        // ...\n    }\n);\n```\n\n### Uploading media to Twitter\n\nTweet media can be uploaded in a 2-step process, and the media have to be\nbase64-encoded. **First** you send each image to Twitter, like this:\n\n```javascript\nvar params = {\n    \"media\": \"iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAIAAAD8GO2jAAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB+0lEQVR42mP8//8/Ay0BEwONwagFoxZQDljI0PP8x7/Z93/e+PxXmpMpXp5dh4+ZgYHh0bd/clxYnMuINaMtfvRLgp3RVZwVU+rkuz+eRz+//wXVxcrEkKnEceXTX0dRlhoNTmKDaOvzXwHHv6x9+gtN/M9/hpjTX+GmMzAw/P7HMOnOj+ff//35x/Ds+z9iLfjPwPDt7//QE1/Sz319/RNh3PkPf+58+Yup/t7Xf9p8zFKcTMRa4CLGCrFm1v2fSjs+pJ/7uuvl7w+//yO7HRkUq3GEyrCREMk+kqy2IiyH3/xhYGD48uf/rPs/Z93/yczIwM3CiFU9Hw5xnD4ouvTt4Tf0AP37n+HTb+w+UOBmIs2CICm2R9/+EZlqGRkYzIVYSLMgRIYtUYGdSAsMBFgUuJhIy2iMDAwt2pysjAwLHv78RcgnOcrs5BQVHEyMG579Imi6Nh9zrBxZFgixMW624pXnwldYcTAzLjDhZmUit7AzE2K54c7fp8eF1QhWRobFptwmgiwkF3b//jMwMjJ8+P3/zPs/yx/9Wvr412+MgBJlZ1xsyuOOrbAibMHH3/87b32fce/nR2ypnpuFMVGevU6TQ5SdqKKeEVez5cuf/7te/j727s+9L/++/v3PzcyowM1kIcTiLs7Kz8pIfNnOONouGrVg1AIGAJ6gvN4J6V9GAAAAAElFTkSuQmCC\"\n);\ncb.__call(\n    \"media_upload\",\n    params,\n    function (reply) {\n        // you get a media id back:\n        console.log(reply.media_id_string);\n\n        // continue upload of 2nd image here, if any (just 1 image works, too!)\n    }\n);\n```\n\n**Second,** you attach the collected media ids for all images to your call\nto ```statuses/update```, like this:\n\n```javascript\ncb.__call(\n    \"statuses_update\",\n    {\n        \"media_ids\": \"12345678901234567890,9876543210987654321\"\n        \"status\": \"Whohoo, I just tweeted two images!\"\n    },\n    function (reply) {\n        // ...\n    }\n);\n```\n\nMore [documentation for tweeting with media](https://dev.twitter.com/rest/public/uploading-media-multiple-photos) is available on the Twitter Developer site.\n\n### Requests with app-only auth\n\nTo send API requests without an access token for a user (app-only auth),\nadd another parameter to your method call, like this:\n\n```javascript\ncb.__call(\n    \"search_tweets\",\n    \"q=Twitter\",\n    function (reply) {\n        // ...\n    },\n    true // this parameter required\n);\n```\n\nBear in mind that not all API methods support application-only auth.\n\nMapping API methods to Codebird function calls\n----------------------------------------------\n\nAs you can see from the last example, there is a general way how Twitter’s API methods\nmap to Codebird function calls. The general rules are:\n\n1. For each slash in a Twitter API method, use an underscore in the Codebird function.\n\n    Example: ```statuses/update``` maps to ```cb.__call(\"statuses_update\", ...)```.\n\n2. For each underscore in a Twitter API method, use camelCase in the Codebird function.\n\n    Example: ```statuses/home_timeline``` maps to ```cb.__call(\"statuses_homeTimeline\", ...)```.\n\n3. For each parameter template in method, use UPPERCASE in the Codebird function.\n    Also don’t forget to include the parameter in your parameter list.\n\n    Examples:\n    - ```statuses/show/:id``` maps to ```cb.__call(\"statuses_show_ID\", 'id=12345', ...)```.\n    - ```users/profile_image/:screen_name``` maps to\n      ```cb.__call(\"users_profileImage_SCREEN_NAME\", \"screen_name=jublonet\", ...)```.\n\nHTTP methods (GET, POST, DELETE etc.)\n-------------------------------------\n\nNever care about which HTTP method (verb) to use when calling a Twitter API.\nCodebird is intelligent enough to find out on its own.\n\nResponse codes\n--------------\n\nThe HTTP response code that the API gave is included in any return values.\nYou can find it within the return object’s ```httpstatus``` property.\n\n### Dealing with rate-limits\n\nBasically, Codebird leaves it up to you to handle Twitter’s rate limit.\nThe library returns the response HTTP status code, so you can detect rate limits.\n\nI suggest you to check if the ```reply.httpstatus``` property is ```400```\nand check with the Twitter API to find out if you are currently being\nrate-limited.\nSee the [Rate Limiting FAQ](https://dev.twitter.com/rest/public/rate-limiting)\nfor more information.\n\nIf you allow your callback function to accept a second parameter,\nyou will receive rate-limiting details in this parameter,\nif the Twitter API responds with rate-limiting HTTP headers.\n\n```javascript\ncb.__call(\n    \"search_tweets\",\n    \"q=Twitter\",\n    function (reply, rate_limit_status) {\n        console.log(rate_limit_status);\n        // ...\n    }\n);\n```\n\nAPI calls and the same-origin policy\n------------------------------------\n\nNormally, browsers only allow requests being sent to addresses that are on\nthe same base domain.  This is a security feature called the “same-origin\npolicy.”  However, this policy is in your way when you try to access the\n(remote) Twitter API domain and its methods.\n\n### Cross-domain requests\n\nWith Codebird, don’t worry about this.  We automatically send cross-domain\nrequests using a secured proxy that sends back the required headers to the\nuser’s browser.\n\nThis CORS proxy is using an encrypted SSL connection.\n*We do not record data sent to or from the Twitter API.\nUsing Codebird’s CORS proxy is subject to the Acceptable use policy.*\n\nIf your JavaScript environment is not restricted under the same-origin policy\n(for example in node.js), direct connections to the Twitter API are established\nautomatically, instead of contacting the CORS proxy.\n\nYou may also turn off the CORS compatibility manually like this:\n\n```javascript\ncb.setUseProxy(false);\n```\n\n### Support for Internet Explorer 7 to 9\n\nCross-domain requests work well in any browser except for\nInternet Explorer 7-9.  Codebird cannot send POST requests in these browsers.\nFor IE7-9, Codebird works in limited operation mode:\n\n- Calls to GET methods work fine,\n- calling POST methods is impossible,\n- Application-only auth does not work.\n\n### Using your own proxy server\n\nThe source code of the CORS proxy is publicly available.  If you want to,\nset up your own instance on your server.  Afterwards, tell Codebird the\naddress:\n\n```javascript\ncb.setProxy(\"https://example.com/codebird-cors-proxy/\");\n```\n\nHeads up!  Follow the notes in the [codebird-cors-proxy README](https://github.com/jublonet/codebird-cors-proxy/#readme) for details.\n\nUsing multiple Codebird instances\n---------------------------------\n\nBy default, each Codebird instance works on its own.\n\nIf you need to run requests to the Twitter API for multiple users at once,\nCodebird supports this automatically. Just create a new object:\n\n```javascript\nvar cb1 = new Codebird;\nvar cb2 = new Codebird;\n```\n\nPlease note that your OAuth consumer key and secret is shared within\nmultiple Codebird instances, while the OAuth request and access tokens with their\nsecrets are *not* shared.\n\nHow Do I…?\n----------\n\n### …get user ID, screen name and more details about the current user?\n\nWhen the user returns from the authentication screen, you need to trade\nthe obtained request token for an access token, using the OAuth verifier.\nAs discussed in the section ‘Usage example,’ you use a call to\n```oauth/access_token``` to do that.\n\nThe API reply to this method call tells you details about the user that just logged in.\nThese details contain the **user ID** and the **screen name.**\n\nTake a look at the returned data as follows:\n\n```javascript\n{\n    oauth_token: \"14648265-rPn8EJwfB**********************\",\n    oauth_token_secret: \"agvf3L3**************************\",\n    user_id: 14648265,\n    screen_name: \"jublonet\",\n    httpstatus: 200\n}\n```\n\nIf you need to get more details, such as the user’s latest tweet,\nyou should fetch the complete User Entity.  The simplest way to get the\nuser entity of the currently authenticated user is to use the\n```account/verify_credentials``` API method.  In Codebird, it works like this:\n\n```javascript\ncb.__call(\n    \"account_verifyCredentials\",\n    {},\n    function (reply) {\n        console.log(reply);\n    }\n);\n```\n\nI suggest to cache the User Entity after obtaining it, as the\n```account/verify_credentials``` method is rate-limited by 15 calls per 15 minutes.\n\n### …walk through cursored results?\n\nThe Twitter REST API utilizes a technique called ‘cursoring’ to paginate\nlarge result sets. Cursoring separates results into pages of no more than\n5000 results at a time, and provides a means to move backwards and\nforwards through these pages.\n\nHere is how you can walk through cursored results with Codebird.\n\n1. Get the first result set of a cursored method:\n```javascript\ncb.__call(\n    \"followers_list\",\n    {},\n    function (result1) {\n        // ...\n    }\n);\n```\n\n2. To navigate forth, take the ```next_cursor_str```:\n```javascript\nvar nextCursor = result1.next_cursor_str;\n```\n\n3. If ```nextCursor``` is not 0, use this cursor to request the next result page:\n```javascript\n    if (nextCursor > 0) {\n        cb.__call(\n            \"followers_list\",\n            {cursor: nextCursor},\n            function (result2) {\n                // ...\n            }\n        );\n    }\n```\n\nTo navigate back instead of forth, use the field ```resultX.previous_cursor_str```\ninstead of ```next_cursor_str```.\n\nIt might make sense to use the cursors in a loop.  Watch out, though,\nnot to send more than the allowed number of requests to ```followers/list```\nper rate-limit timeframe, or else you will hit your rate-limit.\n\n### …use xAuth with Codebird?\n\nCodebird supports xAuth just like every other authentication used at Twitter.\nRemember that your application needs to be whitelisted to be able to use xAuth.\n\nHere’s an example:\n```javascript\ncb.__call(\n    \"oauth_accessToken\",\n    {\n        \"x_auth_username\": \"username\",\n        \"x_auth_password\": \"4h3_p4$$w0rd\",\n        \"x_auth_mode\"    : \"client_auth\"\n    },\n    function (reply) {\n        console.log(reply);\n        // ...\n    }\n);\n```\n\nIf everything went fine, you will get an object like this:\n\n```javascript\n{\n    \"oauth_token\": \"14648265-ABLfBFlE*********************************\",\n    \"oauth_token_secret\": \"9yTBY3pEfj*********************************\",\n    \"user_id\": \"14648265\",\n    \"screen_name\": \"jublonet\",\n    \"x_auth_expires\": \"0\",\n    \"httpstatus\": 200\n}\n```\n\nAre you getting a strange error message, an empty error, or status \"0\"?\nIf the user is enrolled in login verification, the server will return a\nHTTP 401 error with a custom body (that may be filtered by your browser).\n\nYou may check the browser web console for an error message.\n\nWhen this error occurs, advise the user to\n[generate a temporary password](https://twitter.com/settings/applications)\non twitter.com and use that to complete signing in to the application.\n\n### …access and use undocumented Twitter API methods?\n\nBesides the well-documented official methods, the Twitter API also contains\nundocumented additional methods.  They are used by official Twitter clients,\nsuch as Twitter for iPhone and Twitter for Mac.\n\nAccess to these methods is restricted: Only white-listed applications\n(consumer keys) may access undocumented methods.  Codebird supports accessing\ninternal methods, but that will only work if you provide a white-listed API key.\nBy reason, the API keys and secrets for official Twitter clients are not\nprovided within this package, since they should have been kept a secret.\n\nIf you provide Codebird with the Twitter for iPhone consumer key and secret,\nthe following example will get the latest events that happened with you:\n\n```javascript\ncb.__call(\n    \"activity_aboutMe\",\n    {},\n    function (reply) {\n        console.log(reply);\n        // ...\n    }\n);\n```\n",
  "readmeFilename": "README.md",
  "_id": "codebird@2.6.0",
  "dist": {
    "shasum": "f962acd7464d83c1216e75c6b251339d206b7210"
  },
  "_from": "codebird@",
  "_resolved": "https://registry.npmjs.org/codebird/-/codebird-2.6.0.tgz"
}
